#pragma once

#include <array>

#include <target.h>

#include "atom_samples.h"

using namespace fw;

std::array<int16_t, 256> alaw2lpcm{
    -5504,  -5248,  -6016,  -5760,  -4480,  -4224,  -4992,  -4736,  -7552,
    -7296,  -8064,  -7808,  -6528,  -6272,  -7040,  -6784,  -2752,  -2624,
    -3008,  -2880,  -2240,  -2112,  -2496,  -2368,  -3776,  -3648,  -4032,
    -3904,  -3264,  -3136,  -3520,  -3392,  -22016, -20992, -24064, -23040,
    -17920, -16896, -19968, -18944, -30208, -29184, -32256, -31232, -26112,
    -25088, -28160, -27136, -11008, -10496, -12032, -11520, -8960,  -8448,
    -9984,  -9472,  -15104, -14592, -16128, -15616, -13056, -12544, -14080,
    -13568, -344,   -328,   -376,   -360,   -280,   -264,   -312,   -296,
    -472,   -456,   -504,   -488,   -408,   -392,   -440,   -424,   -88,
    -72,    -120,   -104,   -24,    -8,     -56,    -40,    -216,   -200,
    -248,   -232,   -152,   -136,   -184,   -168,   -1376,  -1312,  -1504,
    -1440,  -1120,  -1056,  -1248,  -1184,  -1888,  -1824,  -2016,  -1952,
    -1632,  -1568,  -1760,  -1696,  -688,   -656,   -752,   -720,   -560,
    -528,   -624,   -592,   -944,   -912,   -1008,  -976,   -816,   -784,
    -880,   -848,   5504,   5248,   6016,   5760,   4480,   4224,   4992,
    4736,   7552,   7296,   8064,   7808,   6528,   6272,   7040,   6784,
    2752,   2624,   3008,   2880,   2240,   2112,   2496,   2368,   3776,
    3648,   4032,   3904,   3264,   3136,   3520,   3392,   22016,  20992,
    24064,  23040,  17920,  16896,  19968,  18944,  30208,  29184,  32256,
    31232,  26112,  25088,  28160,  27136,  11008,  10496,  12032,  11520,
    8960,   8448,   9984,   9472,   15104,  14592,  16128,  15616,  13056,
    12544,  14080,  13568,  344,    328,    376,    360,    280,    264,
    312,    296,    472,    456,    504,    488,    408,    392,    440,
    424,    88,     72,     120,    104,    24,     8,      56,     40,
    216,    200,    248,    232,    152,    136,    184,    168,    1376,
    1312,   1504,   1440,   1120,   1056,   1248,   1184,   1888,   1824,
    2016,   1952,   1632,   1568,   1760,   1696,   688,    656,    752,
    720,    560,    528,    624,    592,    944,    912,    1008,   976,
    816,    784,    880,    848,
};

class MyTarget : public Target<Value_t>
{
   public:
    virtual ~MyTarget() = default;

    MyTarget()
    {
        m_values.clear();
        for (std::size_t i = 0; i < VALUES_RANGE; ++i) {
            uint8_t a = static_cast<uint8_t>(i - 128);
            a ^= 0x55;
            auto l = static_cast<Value_t>(alaw2lpcm[a]);
            m_values.push_back(l);
        }
    }

    virtual Distance Compare(const FuncValues_t& values) const
    {
        Distance dist{};
        for (std::size_t i = 0; i < VALUES_RANGE; ++i) {
            if (values[i] != m_values[i])
                ++dist;
        }
        return dist;
    }

    virtual RangeSet<std::size_t> MatchPositions(
        const FuncValues_t& values) const
    {
        RangeSet<std::size_t> rset;
        for (std::size_t i = 0; i < VALUES_RANGE; ++i) {
            if (values[i] == m_values[i]) {
                rset.Add(i);
            }
        }
        return rset;
    }

    virtual FuncValues_t Values() const { return m_values; }

    std::string StrFull() const
    {
        std::string res = "TARGET ";
        for (auto& v : m_values) {
            res += std::string("; ") + std::to_string(v);
        }
        return res;
    }

   private:
    FuncValues_t m_values;
};